@startuml
namespace core {
    class BlockGen << (S,Aquamarine) >> {
        - i int
        - parent *types.Block
        - chain []*types.Block
        - header *types.Header
        - statedb *state.StateDB
        - gasPool *GasPool
        - txs []*types.Transaction
        - receipts []*types.Receipt
        - uncles []*types.Header
        - config *params.ChainConfig
        - engine consensus.Engine

        + SetCoinbase(addr common.Address) 
        + SetExtra(data []byte) 
        + SetNonce(nonce types.BlockNonce) 
        + SetDifficulty(diff *big.Int) 
        + AddTx(tx *types.Transaction) 
        + AddTxWithChain(bc *BlockChain, tx *types.Transaction) 
        + AddUncheckedTx(tx *types.Transaction) 
        + Number() *big.Int
        + AddUncheckedReceipt(receipt *types.Receipt) 
        + TxNonce(addr common.Address) uint64
        + AddUncle(h *types.Header) 
        + PrevBlock(index int) *types.Block
        + OffsetTime(seconds int64) 

    }
    interface Message  {
        + From() common.Address
        + To() *common.Address
        + GasPrice() *big.Int
        + Gas() uint64
        + Value() *big.Int
        + Nonce() uint64
        + CheckNonce() bool
        + Data() []byte
        + Payer() []byte

    }
    class StateProcessor << (S,Aquamarine) >> {
        - config *params.ChainConfig
        - bc *BlockChain
        - engine consensus.Engine

        + Process(block *types.Block, statedb *state.StateDB, cfg vm.Config) (types.Receipts, []*types.Log, uint64, error)

    }
    class StateTransition << (S,Aquamarine) >> {
        - gp *GasPool
        - msg Message
        - gas uint64
        - gasPrice *big.Int
        - initialGas uint64
        - value *big.Int
        - data []byte
        - state vm.StateDB
        - evm *vm.EVM

        - to() common.Address
        - useGas(amount uint64) error
        - buyGas() error
        - preCheck() error
        - refundGas() 
        - gasUsed() uint64

        + TransitionDb() ([]byte, uint64, bool, error)

    }
    class TxPool << (S,Aquamarine) >> {
        - config TxPoolConfig
        - chainconfig *params.ChainConfig
        - chain blockChain
        - gasPrice *big.Int
        - txFeed event.Feed
        - scope event.SubscriptionScope
        - signer types.Signer
        - mu sync.RWMutex
        - istanbul bool
        - currentState *state.StateDB
        - pendingNonces *txNoncer
        - currentMaxGas uint64
        - locals *accountSet
        - journal *txJournal
        - pending <font color=blue>map</font>[common.Address]*txList
        - queue <font color=blue>map</font>[common.Address]*txList
        - beats <font color=blue>map</font>[common.Address]time.Time
        - all *txLookup
        - priced *txPricedList
        - chainHeadCh <font color=blue>chan</font> ChainHeadEvent
        - chainHeadSub event.Subscription
        - reqResetCh <font color=blue>chan</font> *txpoolResetRequest
        - reqPromoteCh <font color=blue>chan</font> *accountSet
        - queueTxEventCh <font color=blue>chan</font> *types.Transaction
        - reorgDoneCh <font color=blue>chan</font> <font color=blue>chan</font> <font color=blue>struct</font>{}
        - reorgShutdownCh <font color=blue>chan</font> <font color=blue>struct</font>{}
        - wg sync.WaitGroup

        - loop() 
        - stats() (int, int)
        - local() <font color=blue>map</font>[common.Address]types.Transactions
        - validateTx(tx *types.Transaction, local bool) error
        - add(tx *types.Transaction, local bool) (bool, error)
        - enqueueTx(hash common.Hash, tx *types.Transaction) (bool, error)
        - journalTx(from common.Address, tx *types.Transaction) 
        - promoteTx(addr common.Address, hash common.Hash, tx *types.Transaction) bool
        - addRemoteSync(tx *types.Transaction) error
        - addTxs(txs []*types.Transaction, local bool, sync bool) []error
        - addTxsLocked(txs []*types.Transaction, local bool) ([]error, *accountSet)
        - removeTx(hash common.Hash, outofbound bool) 
        - requestReset(oldHead *types.Header, newHead *types.Header) <font color=blue>chan</font> <font color=blue>struct</font>{}
        - requestPromoteExecutables(set *accountSet) <font color=blue>chan</font> <font color=blue>struct</font>{}
        - queueTxEvent(tx *types.Transaction) 
        - scheduleReorgLoop() 
        - runReorg(done <font color=blue>chan</font> <font color=blue>struct</font>{}, reset *txpoolResetRequest, dirtyAccounts *accountSet, events <font color=blue>map</font>[common.Address]*txSortedMap) 
        - reset(oldHead *types.Header, newHead *types.Header) 
        - promoteExecutables(accounts []common.Address) []*types.Transaction
        - truncatePending() 
        - truncateQueue() 
        - demoteUnexecutables() 

        + Stop() 
        + SubscribeNewTxsEvent(ch <font color=blue>chan</font> NewTxsEvent) event.Subscription
        + GasPrice() *big.Int
        + SetGasPrice(price *big.Int) 
        + Nonce(addr common.Address) uint64
        + Stats() (int, int)
        + Content() (<font color=blue>map</font>[common.Address]types.Transactions, <font color=blue>map</font>[common.Address]types.Transactions)
        + Pending() (<font color=blue>map</font>[common.Address]types.Transactions, error)
        + Locals() []common.Address
        + AddLocals(txs []*types.Transaction) []error
        + AddLocal(tx *types.Transaction) error
        + AddRemotes(txs []*types.Transaction) []error
        + AddRemotesSync(txs []*types.Transaction) []error
        + AddRemote(tx *types.Transaction) error
        + Status(hashes []common.Hash) []TxStatus
        + Get(hash common.Hash) *types.Transaction

    }
    class TxPoolConfig << (S,Aquamarine) >> {
        + Locals []common.Address
        + NoLocals bool
        + Journal string
        + Rejournal time.Duration
        + PriceLimit uint64
        + PriceBump uint64
        + AccountSlots uint64
        + GlobalSlots uint64
        + AccountQueue uint64
        + GlobalQueue uint64
        + Lifetime time.Duration

        - sanitize() TxPoolConfig

    }
    class accountSet << (S,Aquamarine) >> {
        - accounts <font color=blue>map</font>[common.Address]<font color=blue>struct</font>{}
        - signer types.Signer
        - cache *[]common.Address

        - contains(addr common.Address) bool
        - containsTx(tx *types.Transaction) bool
        - add(addr common.Address) 
        - addTx(tx *types.Transaction) 
        - flatten() []common.Address
        - merge(other *accountSet) 

    }
    class addressByHeartbeat << (S,Aquamarine) >> {
        - address common.Address
        - heartbeat time.Time

    }
    class addressesByHeartbeat << (S,Aquamarine) >> {
        + Len() int
        + Less(i int, j int) bool
        + Swap(i int, j int) 

    }
    interface blockChain  {
        + CurrentBlock() *types.Block
        + GetBlock(hash common.Hash, number uint64) *types.Block
        + StateAt(root common.Hash) (*state.StateDB, error)
        + SubscribeChainHeadEvent(ch <font color=blue>chan</font> ChainHeadEvent) event.Subscription

    }
    class core.TxStatus << (T, #FF7700) >>  {
    }
    class core.addressesByHeartbeat << (T, #FF7700) >>  {
    }
    class core.nonceHeap << (T, #FF7700) >>  {
    }
    class core.priceHeap << (T, #FF7700) >>  {
    }
    class fakeChainReader << (S,Aquamarine) >> {
        - config *params.ChainConfig
        - genesis *types.Block

        + Config() *params.ChainConfig
        + CurrentHeader() *types.Header
        + GetHeaderByNumber(number uint64) *types.Header
        + GetHeaderByHash(hash common.Hash) *types.Header
        + GetHeader(hash common.Hash, number uint64) *types.Header
        + GetBlock(hash common.Hash, number uint64) *types.Block

    }
    class nonceHeap << (S,Aquamarine) >> {
        + Len() int
        + Less(i int, j int) bool
        + Swap(i int, j int) 
        + Push(x <font color=blue>interface</font>{}) 
        + Pop() <font color=blue>interface</font>{}

    }
    class priceHeap << (S,Aquamarine) >> {
        + Len() int
        + Swap(i int, j int) 
        + Less(i int, j int) bool
        + Push(x <font color=blue>interface</font>{}) 
        + Pop() <font color=blue>interface</font>{}

    }
    class statePrefetcher << (S,Aquamarine) >> {
        - config *params.ChainConfig
        - bc *BlockChain
        - engine consensus.Engine

        + Prefetch(block *types.Block, statedb *state.StateDB, cfg vm.Config, interrupt *uint32) 

    }
    class txList << (S,Aquamarine) >> {
        - strict bool
        - txs *txSortedMap
        - costcap *big.Int
        - gascap uint64

        + Overlaps(tx *types.Transaction) bool
        + Add(tx *types.Transaction, priceBump uint64) (bool, *types.Transaction)
        + Forward(threshold uint64) types.Transactions
        + Filter(costLimit *big.Int, gasLimit uint64) (types.Transactions, types.Transactions)
        + Cap(threshold int) types.Transactions
        + Remove(tx *types.Transaction) (bool, types.Transactions)
        + Ready(start uint64) types.Transactions
        + Len() int
        + Empty() bool
        + Flatten() types.Transactions

    }
    class txLookup << (S,Aquamarine) >> {
        - all <font color=blue>map</font>[common.Hash]*types.Transaction
        - lock sync.RWMutex

        + Range(f <font color=blue>func</font>(common.Hash, *types.Transaction) bool) 
        + Get(hash common.Hash) *types.Transaction
        + Count() int
        + Add(tx *types.Transaction) 
        + Remove(hash common.Hash) 

    }
    class txPricedList << (S,Aquamarine) >> {
        - all *txLookup
        - items *priceHeap
        - stales int

        + Put(tx *types.Transaction) 
        + Removed(count int) 
        + Cap(threshold *big.Int, local *accountSet) types.Transactions
        + Underpriced(tx *types.Transaction, local *accountSet) bool
        + Discard(count int, local *accountSet) types.Transactions

    }
    class txSortedMap << (S,Aquamarine) >> {
        - items <font color=blue>map</font>[uint64]*types.Transaction
        - index *nonceHeap
        - cache types.Transactions

        + Get(nonce uint64) *types.Transaction
        + Put(tx *types.Transaction) 
        + Forward(threshold uint64) types.Transactions
        + Filter(filter <font color=blue>func</font>(*types.Transaction) bool) types.Transactions
        + Cap(threshold int) types.Transactions
        + Remove(nonce uint64) bool
        + Ready(start uint64) types.Transactions
        + Len() int
        + Flatten() types.Transactions

    }
    class txpoolResetRequest << (S,Aquamarine) >> {
        - oldHead *types.Header

    }
    class "[]*types.Transaction" as typesTransaction {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
}


namespace runtime {
    class Config << (S,Aquamarine) >> {
        + ChainConfig *params.ChainConfig
        + Difficulty *big.Int
        + Origin common.Address
        + Coinbase common.Address
        + BlockNumber *big.Int
        + Time *big.Int
        + GasLimit uint64
        + GasPrice *big.Int
        + Value *big.Int
        + Debug bool
        + EVMConfig vm.Config
        + State *state.StateDB
        + GetHashFn <font color=blue>func</font>(uint64) common.Hash

    }
}


namespace state {
    class Account << (S,Aquamarine) >> {
        + Nonce uint64
        + Balance *big.Int
        + Root common.Hash
        + CodeHash []byte

    }
    class Code << (S,Aquamarine) >> {
        + String() string

    }
    class Storage << (S,Aquamarine) >> {
        + String() string
        + Copy() Storage

    }
    class state.Code << (T, #FF7700) >>  {
    }
    class state.Storage << (T, #FF7700) >>  {
    }
    class stateObject << (S,Aquamarine) >> {
        - address common.Address
        - addrHash common.Hash
        - data Account
        - db *StateDB
        - dbErr error
        - trie Trie
        - code Code
        - originStorage Storage
        - pendingStorage Storage
        - dirtyStorage Storage
        - fakeStorage Storage
        - dirtyCode bool
        - suicided bool
        - deleted bool

        - empty() bool
        - setError(err error) 
        - markSuicided() 
        - touch() 
        - getTrie(db Database) Trie
        - setState(key common.Hash, value common.Hash) 
        - finalise() 
        - updateTrie(db Database) Trie
        - updateRoot(db Database) 
        - setBalance(amount *big.Int) 
        - deepCopy(db *StateDB) *stateObject
        - setCode(codeHash common.Hash, code []byte) 
        - setNonce(nonce uint64) 

        + EncodeRLP(w io.Writer) error
        + GetState(db Database, key common.Hash) common.Hash
        + GetCommittedState(db Database, key common.Hash) common.Hash
        + SetState(db Database, key common.Hash, value common.Hash) 
        + SetStorage(storage <font color=blue>map</font>[common.Hash]common.Hash) 
        + CommitTrie(db Database) error
        + AddBalance(amount *big.Int) 
        + SubBalance(amount *big.Int) 
        + SetBalance(amount *big.Int) 
        + ReturnGas(gas *big.Int) 
        + Address() common.Address
        + Code(db Database) []byte
        + SetCode(codeHash common.Hash, code []byte) 
        + SetNonce(nonce uint64) 
        + CodeHash() []byte
        + Balance() *big.Int
        + Nonce() uint64
        + Value() *big.Int

    }
    class "<font color=blue>map</font>[common.Hash]common.Hash" as fontcolorbluemapfontcommonHashcommonHash {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
}


namespace types {
    class EIP155Signer << (S,Aquamarine) >> {
        - chainId *big.Int

        + Equal(s2 Signer) bool
        + Sender(tx *Transaction) (common.Address, error)
        + Payer(tx *Transaction) (common.Address, error)
        + SignatureValues(tx *Transaction, sig []byte) (*big.Int, error)
        + Hash(tx *Transaction) common.Hash

    }
    class FrontierSigner << (S,Aquamarine) >> {
        + Equal(s2 Signer) bool
        + SignatureValues(tx *Transaction, sig []byte) (*big.Int, error)
        + Hash(tx *Transaction) common.Hash
        + Sender(tx *Transaction) (common.Address, error)
        + Payer(tx *Transaction) (common.Address, error)

    }
    class HomesteadSigner << (S,Aquamarine) >> {
        + Equal(s2 Signer) bool
        + SignatureValues(tx *Transaction, sig []byte) (*big.Int, error)
        + Sender(tx *Transaction) (common.Address, error)
        + Payer(tx *Transaction) (common.Address, error)

    }
    class Message << (S,Aquamarine) >> {
        - to *common.Address
        - from common.Address
        - nonce uint64
        - amount *big.Int
        - gasLimit uint64
        - gasPrice *big.Int
        - data []byte
        - checkNonce bool
        - payer []byte

        + From() common.Address
        + To() *common.Address
        + GasPrice() *big.Int
        + Value() *big.Int
        + Gas() uint64
        + Nonce() uint64
        + Data() []byte
        + CheckNonce() bool
        + Payer() []byte

    }
    interface Signer  {
        + Sender(tx *Transaction) (common.Address, error)
        + Payer(tx *Transaction) (common.Address, error)
        + SignatureValues(tx *Transaction, sig []byte) (*big.Int, error)
        + Hash(tx *Transaction) common.Hash
        + Equal( Signer) bool

    }
    class Transaction << (S,Aquamarine) >> {
        - data txdata
        - hash atomic.Value
        - size atomic.Value
        - from atomic.Value

        + ChainId() *big.Int
        + Protected() bool
        + EncodeRLP(w io.Writer) error
        + DecodeRLP(s *rlp.Stream) error
        + MarshalJSON() ([]byte, error)
        + UnmarshalJSON(input []byte) error
        + Data() []byte
        + Gas() uint64
        + GasPrice() *big.Int
        + Value() *big.Int
        + Nonce() uint64
        + CheckNonce() bool
        + Payer() []byte
        + SetPayer(payer []byte) 
        + Sender() []byte
        + PayerSig() []byte
        + SetPayerSig(payerSig []byte) 
        + To() *common.Address
        + Hash() common.Hash
        + Size() common.StorageSize
        + AsMessage(s Signer) (Message, error)
        + WithSignature(signer Signer, sig []byte) (*Transaction, error)
        + Cost() *big.Int
        + RawSignatureValues() *big.Int

    }
    class Transactions << (S,Aquamarine) >> {
        + Len() int
        + Swap(i int, j int) 
        + GetRlp(i int) []byte

    }
    class TransactionsByPriceAndNonce << (S,Aquamarine) >> {
        - txs <font color=blue>map</font>[common.Address]Transactions
        - heads TxByPrice
        - signer Signer

        + Peek() *Transaction
        + Shift() 
        + Pop() 

    }
    class TxByNonce << (S,Aquamarine) >> {
        + Len() int
        + Less(i int, j int) bool
        + Swap(i int, j int) 

    }
    class TxByPrice << (S,Aquamarine) >> {
        + Len() int
        + Less(i int, j int) bool
        + Swap(i int, j int) 
        + Push(x <font color=blue>interface</font>{}) 
        + Pop() <font color=blue>interface</font>{}

    }
    class sigCache << (S,Aquamarine) >> {
        - signer Signer
        - from common.Address

    }
    class txdata << (S,Aquamarine) >> {
        + AccountNonce uint64
        + Price *big.Int
        + GasLimit uint64
        + Recipient *common.Address
        + Amount *big.Int
        + Payload []byte
        + Sender []byte
        + Payer []byte
        + PayerSig []byte
        + V *big.Int
        + R *big.Int
        + S *big.Int
        + Hash *common.Hash

    }
    class txdataMarshaling << (S,Aquamarine) >> {
        + AccountNonce hexutil.Uint64
        + Price *hexutil.Big
        + GasLimit hexutil.Uint64
        + Amount *hexutil.Big
        + Payload hexutil.Bytes
        + V *hexutil.Big
        + R *hexutil.Big
        + S *hexutil.Big

    }
    class types.Transactions << (T, #FF7700) >>  {
    }
    class types.TxByNonce << (T, #FF7700) >>  {
    }
    class types.TxByPrice << (T, #FF7700) >>  {
    }
}
"types.FrontierSigner" *-- "types.HomesteadSigner"

"types.Signer" <|-- "types.EIP155Signer"
"types.Signer" <|-- "types.FrontierSigner"
"core.Message" <|-- "types.Message"

namespace vm {
    class Context << (S,Aquamarine) >> {
        + CanTransfer CanTransferFunc
        + Transfer TransferFunc
        + GetHash GetHashFunc
        + Origin common.Address
        + GasPrice *big.Int
        + Coinbase common.Address
        + GasLimit uint64
        + BlockNumber *big.Int
        + Time *big.Int
        + Difficulty *big.Int

    }
    class EVM << (S,Aquamarine) >> {
        - depth int
        - chainConfig *params.ChainConfig
        - chainRules params.Rules
        - vmConfig Config
        - interpreters []Interpreter
        - interpreter Interpreter
        - abort int32
        - callGasTemp uint64

        + StateDB StateDB

        - create(caller ContractRef, codeAndHash *codeAndHash, gas uint64, value *big.Int, address common.Address) ([]byte, common.Address, uint64, error)

        + Cancel() 
        + Cancelled() bool
        + Interpreter() Interpreter
        + Call(caller ContractRef, addr common.Address, input []byte, gas uint64, value *big.Int, payer common.Address) ([]byte, uint64, error)
        + CallCode(caller ContractRef, addr common.Address, input []byte, gas uint64, value *big.Int) ([]byte, uint64, error)
        + DelegateCall(caller ContractRef, addr common.Address, input []byte, gas uint64) ([]byte, uint64, error)
        + StaticCall(caller ContractRef, addr common.Address, input []byte, gas uint64) ([]byte, uint64, error)
        + Create(caller ContractRef, code []byte, gas uint64, value *big.Int) ([]byte, common.Address, uint64, error)
        + Create2(caller ContractRef, code []byte, gas uint64, endowment *big.Int, salt *big.Int) ([]byte, common.Address, uint64, error)
        + ChainConfig() *params.ChainConfig

    }
    class codeAndHash << (S,Aquamarine) >> {
        - code []byte
        - hash common.Hash

        + Hash() common.Hash

    }
    class vm.CanTransferFunc << (T, #FF7700) >>  {
    }
    class "<font color=blue>func</font>(StateDB, common.Address, *big.Int) bool" as fontcolorbluefuncfontStateDBcommonAddressbigIntbool {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
}
"vm.Context" *-- "vm.EVM"


"__builtin__.[]byte" #.. "state.Code"
"__builtin__.[]uint64" #.. "core.nonceHeap"
"__builtin__.uint" #.. "core.TxStatus"
"core.typesTransaction" #.. "core.priceHeap"
"core.[]addressByHeartbeat" #.. "core.addressesByHeartbeat"
"state.fontcolorbluemapfontcommonHashcommonHash" #.. "state.Storage"
"types.Transactions" #.. "types.TxByNonce"
"types.Transactions" #.. "types.TxByPrice"
"types.[]*Transaction" #.. "types.Transactions"
"vm.fontcolorbluefuncfontStateDBcommonAddressbigIntbool" #.. "vm.CanTransferFunc"
@enduml
